#########################################################################################
#########################################################################################
#											#
#	Some basic info on functions in the modules in 'DELPHI_Python'			#
#											#
#########################################################################################
#########################################################################################


#################################################################################
#    DELPHI									#
# library for computation of instabilities from the DELPHI code			#
#################################################################################

FILE
    DELPHI.py


FUNCTIONS
    DELPHI_tunespread_wrapper(imp_mod, Mscan, Qpscan, dampscan, Nbscan, omegasscan, dphasescan, bxscan, bxyscan, omega0, Qx, Qy, gamma, eta, a, b, taub, g, planes=['x', 'y'], nevery=1, particle='proton', flagnorm=0, flagdamperimp=0, d=None, freqd=None, kmax=1, kmaxplot=10, crit=0.05, abseps=0.001, flagm0=False, distribution='gaussian', kini=12, lxplusbatch=None, comment='', queue='1nh', dire='', flagQpscan_outside=True)
        wrapper of eigenmodesDELPHI_tunespread_converged_scan_lxplus, with more scans.
        imp_mod is an impedance or wake model (see Impedance.py)
        from which one extract the planes given in 'planes'
        Mscan is the scan in number of bunches
        lxplusbatch: if None, no use of lxplus batch system
                     if 'launch' -> launch calculation on lxplus on queue 'queue'
                     if 'retrieve' -> retrieve outputs
        comment is used to identify the batch job name and the pickle filename
        dire is the directory where to put/find the result; it should be a path 
        relative to the current directory (e.g. '../')
        nevery indicates the downsampling (we take 1 frequency every "nevery" 
        frequencies), for the impedance.
        flagQpscan_outside: True to put the Qpscan outside the lxplus batch job,
        False so that it is inside the lxplus batch job.
    
    DELPHI_wrapper(imp_mod, Mscan, Qpscan, dampscan, Nbscan, omegasscan, dphasescan, omega0, Qx, Qy, gamma, eta, a, b, taub, g, planes=['x', 'y'], nevery=1, particle='proton', flagnorm=0, flagdamperimp=0, d=None, freqd=None, kmax=1, kmaxplot=10, crit=0.05, abseps=0.001, flagm0=False, lxplusbatch=None, comment='', queue='1nh', dire='', flagQpscan_outside=True)
        wrapper of eigenmodesDELPHI_converged_scan_lxplus, with more scans
        imp_mod is an impedance or wake model (see Impedance.py)
        from which one extract the planes given in 'planes'
        Mscan is the scan in number of bunches
        lxplusbatch: if None, no use of lxplus batch system
                     if 'launch' -> launch calculation on lxplus on queue 'queue'
                     if 'retrieve' -> retrieve outputs
        comment is used to identify the batch job name and the pickle filename
        dire is the directory where to put/find the result; it should be a path 
        relative to the current directory (e.g. '../')
        nevery indicates the downsampling (we take 1 frequency every "nevery" 
        frequencies), for the impedance.
        flagQpscan_outside: True to put the Qpscan outside the lxplus batch job,
        False so that it is inside the lxplus batch job.
    
    MOSES_wrapper(rootname, Rres, fres, Qres, Qpscan, Nbscan, omegasscan, omega0, E, alphap, sigmaz, avbeta, lmax, nmax, mmin=-3, mmax=3, taumin=-0.5, taumax=0.5, firstline='MOSES input file #', action='launch', MOSES_exec=r'~/DFS/Documents/MOSES4W/MOSES\ application\ for\ Windows/MOSES4W.exe', direname_local='DFS', dirname_remote='//cernhomeN.cern.ch/m/mounet', flag_win=True)
        Wrapper to produce easily input files for MOSES (https://oraweb.cern.ch/pls/hhh/code_website.disp_code?code_name=MOSES), from scanned parameters.
        MOSES is a code to compute instabilities, written by Y. Chin (Y. H. Chin. User's Guide for New MOSES Version 2.0 ,
        CERN/LEP-TH/88-05, 1988) that works in a similar way as DELPHI (single-bunch, resonator impedance only, with Landau damping).
        You need to have installed the executable in the path 'MOSES_exec'. This is specially
        designed for a MOSES executable working under Windows, in a directory accessible from here (typically, on a mounted
        DFS file system).
        
        This wrapper, depending on 'action', either writes MOSES input files for scanned parameters and write a Windows batch file
        to launch all the calculations (you still have to launch calculations by hand), or 
        retrieve the MOSES output to get tuneshifts.
        Inputs:
         - rootname: root (including path) of the final input and batch filenames,
         - Rres, fres, Qres: transverse shunt impedance, resonance frequency and quality factor
           for the resonator impedance model. Each (or all) of them can be a list of values, or a scalar.
         - Qpscan: list of chromaticity (Q') to scan,
         - Nbscan: list of number of particles to scan (actually, each value is not used, but only
           the number of values, the first and the last ones, i.e. it makes a linear sampling between
           the first and last number of particles in Nbscan, with min(len(Nbscan),120) points),
         - omegasscan: list of omegas (synchrotron angular frequency in rad/s) to scan,
         - omega0: angular revolution frequency in rad/s,
         - E: energy in eV,
         - alphap: momentum compaction factor,
         - sigmaz: bunch length in m,
         - avbeta: average beta function in m (actually R/Q),
         - lmax: maximum azimuthal mode number to consider (we go from -lmax to +lmax),
         - nmax: number of radial mode -1 (0 means 1 radial mode),
         - mmin & mmax: minimum and maximum for the y-axis of MOSES TMCI plot for the 
           real part of the tune shift / Qs,
         - taumin & taumax: minimum and maximum for the y-axis of MOSES TMCI plot for the 
           imaginary part of the tune shift / Qs,
         - firstline: first line of MOSES input files (some comment),
         - action: 'launch' or 'retrieve': either write input file + Win. bat file to launch 
           all of them easily, or read output and give tuneshifts.
         - MOSES_exec: local path where to find MOSES' executable (Unix path).
         - direname_local: local directory name in which the remote file system is mounted (do not include
         the ~/ or /home/[username]/, just put the bare directory name or path from ~/).
         - dirname_remote: remote directory name to which direname_local corresponds (NOTE: you can keep
         the '/' like this, for Windows paths the replacement by '' will be done automatically - see next flag).
         - flag_win: True if remote path is a Windows path; then all '/' are replaced by ''.
        Outputs:
           all modes tuneshifts, tuneshifts of mode 0, and Iscan (arrays)
    
    Qs_from_RF_param(V, h, gamma, eta, phis=0.0, particle='proton')
        computes Qs (at zero amplitude) from RF parameters:
        - V = RF voltage [V],
        - h = RF harmonic number,
        - gamma = relativistic mass factor,
        - eta = slip factor = alphap - 1/gamma^2,
        - phis = synchrotron phase [rad],
        - particle -> 'proton' or 'electron'.
    
    compute_damper_matrix(lmax, nmax, nx, M, omegaksi, omega0, tunefrac, a, b, taub, g, flagdamperimp=0, d=None, freqd=None, abseps=0.0001, lmaxold=-1, nmaxold=-1, damperold=None)
        function to compute DELPHI damper matrix
    
    compute_impedance_matrix(lmax, nmax, nx, M, omegaksi, omega0, tunefrac, a, b, taub, g, Z, freqZ, flag_trapz=0, abseps=0.0001, lmaxold=-1, nmaxold=-1, couplold=None)
        function to compute DELPHI impedance matrix
    
    computes_coef(f0, dmax, b, g0, dnormfactor, taub, dphase, M, Nb, gamma, Q, particle='proton')
        compute coefficients in front of damper and imepdance matrices in the final eigenvalue system

        - f0: revolution frequency,
        - dmax: damper gain (inverse of number of damping turns) - depends also on normalization factor dnormfactor,
        - b: b parameter in DELPHI (for Laguerre poly. decomposition),
        - g0: first term in distribution decomposition over Laguerre polynomial,
        - dnormfactor: normalization factor for damper matrix. Usually such that damping rate of mode nx=0, l=0
            and n=0 (i.e. all coupled-bunch, azimuthal and radial mode numbers =0) is exactly dmax. It is precomputed
            beforehand (either at the current chromaticity, or at Q'=0),
        - taub: bunch length (total, or 4*RMS for Gaussian bunches) in seconds,
        - dphase: additional phase of the damper in radian (w.r.t. to purely resistive damper when dphase=0) 
        - M: number of bunches,
        - Nb: number of particles per bunch,
        - gamma: relativistic velocity factor,
        - Q: tune (with integer part included),
        - particle: 'proton' or 'electron'.
    
    damper_imp_Karliner_Popov(L0, L1, L2, tauf, R, Q, f0, f)
        evaluate (to a multiplicative factor) "impedance" of a damper
        (Karliner-Popov, Nucl. Inst. Meth. Phys. Res. A 2005)
        L0: distance from pickup to kicker (m),
        L1: pickup-length (m),
        L2: kicker length (m),
        tauf: 1/tauf ~ frequency of low-pass filter,
        R: machine radius,
        Q: tune,
        f0: revolution frequency,
        f: array of frequencies at which impedance is evaluated.
    
    determinantDELPHI_tunespread(dQc, lmax, nmax, matdamper, matZ, coefdamper, coefZ, bx, bxy, omega0, omegas, distribution='gaussian')
        compute the determinant of the final matrix (including impedance, damper and transverse Landau damping) 
        as a function of coherent tune shift dQc. This function has to be solved (vs. dQc) to find 
        the eigenmodes.

        - dQc: coherent tune shift (from unperturbed tune Q0).
        - lmax: number of azimuthal modes in matrices (we go from -lmax to +lmax)
        - nmax: number of radial modes in matrices, minus one (we go from 0 to +nmax)
        - matdamper: precomputed damper matrix,
        - matZ: precomputed impedance matrix,
        - coefdamper: coefficient in front of damper matrix
        - coefZ: coefficient in front of impedance matrix
        - bx & bxy: detuning coefficients for the transverse tunespread (in units of sigma),
          in the plane of the coherent motion (bx) and in the other plane (bxy)
        - omega0: revolution angular frequency
        - omegas: synchrotron angular frequency
        - distribution: kind of transverse distribution ('gaussian' or 'parabolic')
    
    determinantDELPHI_tunespread_array(dQc, lmax, nmax, matdamper, matZ, coefdamper, coefZ, bx, bxy, omega0, omegas, distribution='gaussian')
        compute the determinant of the final matrix (including impedance, damper and transverse Landau damping) 
        as a function of coherent tune shift dQc. Version where dQc can be an array.
        - dQc: coherent tune shift (from unperturbed tune Q0). Can be a scalar or an array.
        - lmax: number of azimuthal modes in matrices (we go from -lmax to +lmax)
        - nmax: number of radial modes in matrices, minus one (we go from 0 to +nmax)
        - matdamper: precomputed damper matrix,
        - matZ: precomputed impedance matrix,
        - coefdamper: coefficient in front of damper matrix
        - coefZ: coefficient in front of impedance matrix
        - bx & bxy: detuning coefficients for the transverse tunespread (in units of sigma),
          in the plane of the coherent motion (bx) and in the other plane (bxy)
        - omega0: revolution angular frequency
        - omegas: synchrotron angular frequency
        - distribution: kind of transverse distribution ('gaussian' or 'parabolic')
    
    detuning_coef_oct_LHC(plane, gamma, epsnormx, epsnormy, current_foc_oct, current_defoc_oct)
        compute detuning coefficients (per transverse sigma) bx (in the plane of the coherent motion)
        and bxy (in the other plane) for LHC octupoles with standard (i.e. non ATS) optics 
        (squeeze does not matter, but ATS does).
        Input parameters:

        - plane: plane of coherent motion: 'x' if horizontal, 'y' if vertical
         (sligthly different coefficients).
        - gamma: relativistic mass factor of the beam,
        - epsnormx: normalized emittance in the plane (x or y) studied (e.g. 3.75e-6 m at 7TeV),
        - epsnormy: normalized emittance in the plane (x or y) perpendicular to the plane studied (e.g. 3.75e-6 m at 7TeV),
        - current_foc_oct: current in the focusing octupoles (max is supposed to be 550A),
        - current_defoc_oct: current in the defocusing octupoles (max is supposed to be 550A),
    
    dispersion_integral_oct_2D(Q, bx, bxy, distribution='gaussian')
        computes the dispersion integral in 2D from an octupole with detuning 
        per sigma given by bx (in the plane of the coherent motion) and bxy (in the
        other plane). Compute the integral for a certain coherent complex tune shift Q.
        The transverse distribution can be 'gaussian' or 'parabolic'.
        This is the integral vs Jx and Jy of Jx*dphi/dJx/(Q-bx*Jx-bxy*Jy-i0) (with phi the distribution function)
        
        NOTE: for stability diagrams, use -1/dispersion_integral, and usually the convention is to plot
        -Im[Q] vs Re[Q] (beware of all these minus signs).
    
    eigenmodesDELPHI(lmax, nmax, matdamper, matZ, coefdamper, coefZ, omegas, flageigenvect=False)
        compute and diagonalize the final matrix (including impedance, damper and Qs)

        - lmax: number of azimuthal modes in matrices (we go from -lmax to +lmax)
        - nmax: number of radial modes in matrices, minus one (we go from 0 to +nmax)
        - matdamper: precomputed damper matrix,
        - matZ: precomputed imepdance matrix,
        - coefdamper: coefficient in front of damper matrix
        - coefZ: coefficient in front of impedance matrix
        - omegas: synchrotron angular frequency
        - flageigenvect: True to compute eigenvect (faster without)
    
    eigenmodesDELPHI_converged(nx, M, omegaksi, omega0, tunefrac, a, b, taub, g, Z, freqZ, coefdamper, coefZ, omegas, flag_trapz=0, flagdamperimp=0, d=None, freqd=None, kmax=5, crit=0.05, abseps=0.001, lmaxold=-1, nmaxold=-1, matdamperold=None, matZold=None, flageigenvect=False)
        computes eigenmodes for increasing matrix size, until we get convergence on 
        the imaginary part of eigenvalues

        - nx: coupled-bunch mode considered (from 0 to M-1),
        - M: number of equidistant bunches,
        - omegaksi: chromatic angular frequency,
        - omega0: revolution angular frequency,
        - tunefrac: fractional part of the tune,
        - a,b: parameters for Laguerre polynomial decomposition in DELPHI,
        - taub: total bunch length (seconds) or 4*RMS for Gaussian bunches,
        - g: array with coef. of decomposition of initial distribution on Laguerre polynomials,
        - Z, freqZ: Z=damper impedance at the frequencies (NOT ANGULAR) freqZ
        - coefdamper, coefZ: coefficients in fromt resp. of damper and impedance matrix (precomputed beforehand),
        - omegas: synchrotron angular frequency.
        - flag_trapz: flag to use trapz method for computation of impedance matrix (if 1),
        - flagdamperimp: flag to use frequency dependent damper gain (if 1)(with d and freqd arrays),
        - d, freqd: d=damper impedance at the frequencies (NOT ANGULAR) freqd - used only if freqdamperimp==1,
        - kmax: number of eigenvalues to make converge,
        - crit: relative error tolerated on imaginary part of eigenvalues,
        - abseps: ~absolute error tolerated on imaginary part of eigenvalues (also used for absolute error determination
              on impedance and damper sums),
        - lmaxold, nmaxold: max azimuthal mode number of max radial mode number (radial mode begins at 0)
              already computed (in matdamperold and matZold),
        - matdamperold ,matZold: damper and impedance matrices already computed.
    
    eigenmodesDELPHI_converged_scan(Qpscan, nxscan, dampscan, Nbscan, omegasscan, dphasescan, M, omega0, Q, gamma, eta, a, b, taub, g, Z, freq, particle='proton', flagnorm=0, flag_trapz=0, flagdamperimp=0, d=None, freqd=None, kmax=1, kmaxplot=10, crit=0.05, abseps=0.001, flagm0=False)
        encapsulate DELPHI calculations, with scans on coupled-bunch modes, damper gain,
        nb of particles, synchrotron tune and damper phase.
        return tuneshifts (complex) for all these parameters scanned
        and also the tuneshifts of the most unstable coupled-bunch modes
    
    eigenmodesDELPHI_converged_scan_lxplus(Qpscan, nxscan, dampscan, Nbscan, omegasscan, dphasescan, M, omega0, Q, gamma, eta, a, b, taub, g, Z, freq, particle='proton', flagnorm=0, flag_trapz=0, flagdamperimp=0, d=None, freqd=None, kmax=1, kmaxplot=10, crit=0.05, abseps=0.001, flagm0=False, lxplusbatch=None, comment='', queue='1nh', dire='')
        same as eigenmodesDELPHI_converged_scan with possibility to launch on lxplus
        lxplusbatch: if None, no use of any queuing system
                     if 'launch' -> launch calculation on lxplus (or any LSF batch system) on queue 'queue'
                     if 'retrieve' -> retrieve outputs
        comment is used to identify the batch job name and the pickle filename
        dire is the directory where to put/find the result; it should be a path 
        relative to the current directory (e.g. '../')
    
    eigenmodesDELPHI_tunespread_converged(nx, M, omegaksi, omega0, tunefrac, a, b, taub, g, Z, freqZ, coefdamper, coefZ, omegas, bx, bxy, flag_trapz=0, flagdamperimp=0, d=None, freqd=None, kmax=5, crit=0.05, abseps=0.001, lmaxold=-1, nmaxold=-1, matdamperold=None, matZold=None, distribution='gaussian', kini=12)
        computes eigenmodes for increasing matrix size, until we get convergence on 
        the imaginary part of eigenvalues. We include tunespread.

        - nx: coupled-bunch mode considered (from 0 to M-1),
        - M: number of equidistant bunches,
        - omegaksi: chromatic angular frequency,
        - omega0: revolution angular frequency,
        - tunefrac: fractional part of the tune,
        - a,b: parameters for Laguerre polynomial decomposition in DELPHI,
        - taub: total bunch length (seconds) or 4*RMS for Gaussian bunches,
        - g: array with coef. of decomposition of initial distribution on Laguerre polynomials,
        - Z, freqZ: Z=damper impedance at the frequencies (NOT ANGULAR) freqZ
        - coefdamper, coefZ: coefficients in fromt resp. of damper and impedance matrix (precomputed beforehand),
        - omegas: synchrotron angular frequency.
        - bx & bxy: detuning coefficients for the transverse tunespread (in units of sigma),
          in the plane of the coherent motion (bx) and in the other plane (bxy)
        - flag_trapz: flag to use trapz method for computation of impedance matrix (if 1),
        - flagdamperimp: flag to use frequency dependent damper gain (if 1)(with d and freqd arrays),
        - d, freqd: d=damper impedance at the frequencies (NOT ANGULAR) freqd - used only if freqdamperimp==1,
        - kmax: number of eigenvalues to make converge,
        - crit: relative error tolerated on imaginary part of eigenvalues,
        - abseps: ~absolute error tolerated on imaginary part of eigenvalues (also used for absolute error determination
              on impedance and damper sums),
        - lmaxold, nmaxold: max azimuthal mode number of max radial mode number (radial mode begins at 0)
              already computed (in matdamperold and matZold),
        - matdamperold ,matZold: damper and impedance matrices already computed,
        - distribution: kind of transverse distribution ('gaussian' or 'parabolic'),
        - kini: number of eigenvalues of the linear system (without Landau damping)
        to initialize the solving algorithm.
    
    eigenmodesDELPHI_tunespread_converged_scan(Qpscan, nxscan, dampscan, Nbscan, omegasscan, dphasescan, bxscan, bxyscan, M, omega0, Q, gamma, eta, a, b, taub, g, Z, freq, particle='proton', flagnorm=0, flag_trapz=0, flagdamperimp=0, d=None, freqd=None, kmax=1, kmaxplot=10, crit=0.05, abseps=0.001, flagm0=False, distribution='gaussian', kini=12)
        encapsulate DELPHI calculations (with tunespread), with scans on coupled-bunch modes, 
        damper gain, nb of particles, synchrotron tune, damper phase, and detuning coefficients.
        return tuneshifts (complex) for all these parameters scanned
        and also the tuneshifts of the most unstable coupled-bunch modes
        Note: bxscan & bxyscan are done simultaneously if they are of same length
        (then in the resulting table of tuneshifts, the length of bxyscan is 
        replaced by 1)
    
    eigenmodesDELPHI_tunespread_converged_scan_lxplus(Qpscan, nxscan, dampscan, Nbscan, omegasscan, dphasescan, bxscan, bxyscan, M, omega0, Q, gamma, eta, a, b, taub, g, Z, freq, particle='proton', flagnorm=0, flag_trapz=0, flagdamperimp=0, d=None, freqd=None, kmax=1, kmaxplot=10, crit=0.05, abseps=0.001, flagm0=False, distribution='gaussian', kini=12, lxplusbatch=None, comment='', queue='1nh', dire='')
        same as eigenmodesDELPHI_tunespread_converged_scan with possibility to launch on lxplus
        lxplusbatch: if None, no use of lxplus batch system
                     if 'launch' -> launch calculation on lxplus on queue 'queue'
                     if 'retrieve' -> retrieve outputs
        comment is used to identify the batch job name and the pickle filename
        dire is the directory where to put/find the result; it should be a path 
        relative to the current directory (e.g. '../')
    
    eta_from_Qs_RF_param(Qs, V, h, gamma, phis=0.0, particle='proton')
        computes eta (slip factor) from RF parameters:
        - Qs = synchrotron tune,
        - V = RF voltage [V],
        - h = RF harmonic number,
        - gamma = relativistic mass factor,
        - eta = slip factor = alphap - 1/gamma^2,
        - phis = synchrotron phase [rad],
        - particle -> 'proton' or 'electron'.
    
    extract_between_bounds(tuneshifts, lower, upper)
        extract in a table of complex tuneshifts the "biggest" mode
        that has a real tuneshift between 'lower' and 'upper'
    
    find_intensity_threshold(Nbscan, freqshift, thresgrowth=0.0, ninterp=10000.0)
        find intensity threshold of instability
        when growth rate becomes more than thresgrowth
    
    long_matching_from_sigmaz(sigmaz, gamma, eta, Qs, R, V, h, particle='proton', flaglinear=False)
        computes delta_p/p0 (sigma) and longitudinal emittance (in eV.s) for a matched bunch
        from:
         - sigmaz = bunch length [m],
         - gamma = relativistic mass factor,
         - eta = slip factor = alphap - 1/gamma^2,
         - Qs = synchrotron tune (at zero amplitude),
         - R = machine radius (circumference / 2pi) [m],
         - V = RF voltage [V],
         - h = RF harmonic number,
         - particle -> 'proton' or 'electron',
         - flaglinear -> True for linear RF bucket (otherwise it does non-linear matching).
    
    longdistribution_decomp(taub, typelong='Gaussian')
        decomposition over Laguerre polynomials of the longitudinal distribution
        for a bunch of length taub (seconds) (4*RMS for Gaussian)
        typelong can be "Gaussian", "parabolicamp", "parabolicline"
    
    plot_TMCI(Nbscan, lambdax, ax, part='real', leg='', patcol='xb', xlab='Nb particles per bunch', title='', ms=15.0, ylim=[-5, 5])
        TMCI plot from lambdax=(Q-Q0)/Qs of all (radial+azimuthal) coherent 
        modes vs intensity Nbscan
        part = 'real' or 'imag'
    
    solve_determinantDELPHI_tunespread(lmax, nmax, matdamper, matZ, coefdamper, coefZ, bx, bxy, omega0, omegas, distribution='gaussian', kini=12)
        solve the equation determinant(final matrix)=0 (matrix includes impedance, damper and transverse Landau damping) 
        as a function of coherent tune shift, to find the eigenmodes.

        - lmax: number of azimuthal modes in matrices (we go from -lmax to +lmax)
        - nmax: number of radial modes in matrices, minus one (we go from 0 to +nmax)
        - matdamper: precomputed damper matrix,
        - matZ: precomputed impedance matrix,
        - coefdamper: coefficient in front of damper matrix,
        - coefZ: coefficient in front of impedance matrix,
        - bx & bxy: detuning coefficients for the transverse tunespread (in units of sigma),
          in the plane of the coherent motion (bx) and in the other plane (bxy),
        - omega0: revolution angular frequency,
        - omegas: synchrotron angular frequency,
        - distribution: kind of transverse distribution ('gaussian' or 'parabolic'),
        - kini: number of eigenvalues of the linear system (without Landau damping)
        to initialize the solving algorithm.
    
    solve_stability_diagram(lmax, nmax, matdamper, matZ, coefdamper, coefZ, bx, bxy, omega0, omegas, distribution='gaussian', kini=12)
        solve the stability diagram equation dQu*dispersion_integral(Qc)=-1 
        with dQu the unperturbed coherent tune shifts from DELPHI (using impedance & damper
        but not Landau damping) as a function of coherent tune shift Qc, to 
        find the eigenmodes with transverse Landau damping (stability diagram approx.).
        
        - lmax: number of azimuthal modes in matrices (we go from -lmax to +lmax)
        - nmax: number of radial modes in matrices, minus one (we go from 0 to +nmax)
        - matdamper: precomputed damper matrix,
        - matZ: precomputed impedance matrix,
        - coefdamper: coefficient in front of damper matrix,
        - coefZ: coefficient in front of impedance matrix,
        - bx & bxy: detuning coefficients for the transverse tunespread (in units of sigma),
          in the plane of the coherent motion (bx) and in the other plane (bxy),
        - omega0: revolution angular frequency,
        - omegas: synchrotron angular frequency,
        - distribution: kind of transverse distribution ('gaussian' or 'parabolic'),
        - kini: number of eigenvalues of the linear system (without Landau damping)
        to initialize the solving algorithm.
    
    write_CFG_HEADTAIL(cfgname, particle='proton', Nb=100000000000.0, betax=65.976, betay=71.526, sigmaz=0.0937, emitx=2e-06, emity=2e-06, delta=0.00014435, Qs=0.00234243, alphap=0.0003225, circ=26658.883, gamma=4263.16, nkick=1, nturns=200000, pipex=0.05, pipey=0.05, nsigmaz=2, Qx=64.31, Qy=59.32, Qpx=0, Qpy=0, isyn=4, nMP_per_sl=5000, nbunch=1, nsl=200, spacing=20, ibunchtb=0, iwake=1, ipipe=8, ntwake=20, fresT=1000000000.0, QT=1.0, RT=0.0, fresL=200000000.0, QL=140.0, RL=0.0, condRW=1400000.0, lenRW=26658.883, ibeta=0, iwaketb=6, ispace=0, smooth=3, kickswitch=1, xkick=1, ykick=1.0, zkick=0.0, iamp=1, icoupl=0, coupl=0.0015, dispx=0, isext=0, sext_str=-0.254564, disp_sext=2.24, iloss=2, Qsecx=0, Qsecy=0, nturns_betn=1, start_turn=199000, end_turn=199100, VRF=12000000.0, h=35640, VRF2_start=0.0, VRF2_end=0.0, h2=18480, phase=0.0, start_RF2=2000, end_RF2=3000, prate=0.0, alphap_sec=0.0, phase_shift_max=1, octfoc=0.0, octdefoc=0.0, dratex=0.02, dratey=0.02, nMP_prb=500, ipre=1, idampbeam=0)
        Write an HEADTAIL input file (.cfg)
        Parameters are the same (and in the same order) as in the .cfg file, except that:
        - units are all SI except prate in GeV/c/s (but nsigmaz, xkick and ykick are still in number of sigmas,
        and spacing in RF buckets),
        - number of macroparticles=nMP_per_sl*nsl.
        cfgname contains the name of the input file (with extension).
        Default values are typical of 2012 LHC operation at 4TeV (except detuning and Qsec).


#################################################################################
#    particle_param								#
# some basic physical constants							#
#################################################################################

FILE
    particle_param.py

FUNCTIONS
    electron_param()
        gives basic electron parameters
        Output: e [C], mass [kg], speed of light [m/s], rest energy [J]
    
    proton_param()
        gives basic proton parameters
        Output: e [C], mass [kg], speed of light [m/s], rest energy [J]
	

#################################################################################
#   DELPHI_script								#
# NOT TO BE USED DIRECTLY BY THE USER (used internally by DELPHI functions)	#
#################################################################################

FILE
    DELPHI_script.py

# script encapsulating a DELPHI calculation with scans
# launched in command line with one argument, the name of the file containing
# all the parameters (pickle format)

#################################################################################
#    DELPHI_tunespread_script							#
# NOT TO BE USED DIRECTLY BY THE USER (used internally by DELPHI functions)	#
#################################################################################

FILE
    DELPHI_tunespread_script.py

# script encapsulating a DELPHI calculation (with tunespread) with scans
# launched in command line with one argument, the name of the file containing
# all the parameters (pickle format)


